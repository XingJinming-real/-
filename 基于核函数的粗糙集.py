import sys
import time
import numpy as np
from sklearn.svm import SVC
import sklearn
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn import tree
from PyQt5 import QtCore, QtGui, QtWidgets
data_wine = datasets.load_wine()
data_wine_attr = data_wine.data
data_wine_label = data_wine.target
data_wine_attr_train, data_wine_attr_test, data_wine_label_train, data_wine_label_test = train_test_split(
    data_wine_attr, data_wine_label, test_size=0.3)
data_wine_attr_train, data_wine_attr_test = sklearn.preprocessing.minmax_scale(data_wine_attr_train, feature_range=[0,
                                                                                                                    1]), sklearn.preprocessing.minmax_scale(
    data_wine_attr_test, feature_range=[0, 1])
data_digits = datasets.load_digits()
data_digits_attr = data_digits.data
data_digits_label = data_digits.target
data_digits_attr_train, data_digits_attr_test, data_digits_label_train, data_digits_label_test = train_test_split(
    data_digits_attr, data_digits_label, test_size=0.3)
data_digits_attr_train, data_digits_attr_test = sklearn.preprocessing.minmax_scale(data_digits_attr_train,
                                                                                   feature_range=[0,
                                                                                                  1]), sklearn.preprocessing.minmax_scale(
    data_digits_attr_test, feature_range=[0, 1])
choiceAlgorithm = ""
choiceDataSets = ""
choiceModel = ""
isAll = False
putAttrSelected = []
Time = 0
Delta = 0.001
DeltaIncreae = 0.005
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.





class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(496, 406)
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralWidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 241, 401))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.comboBox_4 = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.verticalLayout_3.addWidget(self.comboBox_4)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_4.addWidget(self.label_3)
        self.comboBox_5 = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.verticalLayout_4.addWidget(self.comboBox_5)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.comboBox_6 = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.verticalLayout_5.addWidget(self.comboBox_6)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.verticalLayout.addWidget(self.label_7)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_5 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.verticalLayout_5.addLayout(self.verticalLayout)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        self.gridLayout.addLayout(self.horizontalLayout, 2, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.centralWidget)
        self.scrollArea.setGeometry(QtCore.QRect(240, 0, 251, 401))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 249, 399))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.label_5 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_5.setGeometry(QtCore.QRect(0, 10, 149, 15))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_6.setGeometry(QtCore.QRect(0, 230, 72, 15))
        self.label_6.setObjectName("label_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pushButton_3.setGeometry(QtCore.QRect(0, 370, 251, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents)
        self.textBrowser.setGeometry(QtCore.QRect(0, 260, 251, 111))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents)
        self.textBrowser_2.setGeometry(QtCore.QRect(0, 30, 256, 191))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(MainWindow.open_second_UI)
        self.comboBox_6.activated['QString'].connect(MainWindow.get_algorithmChoice)
        self.comboBox_5.activated['QString'].connect(MainWindow.get_dataSetsChoice)
        self.comboBox_4.activated['QString'].connect(MainWindow.get_modelChoice)
        self.pushButton_5.clicked.connect(MainWindow.isAll)
        self.pushButton_3.clicked.connect(MainWindow.close)
        self.pushButton_2.clicked.connect(MainWindow.Train)
        self.pushButton_2.clicked.connect(self.textBrowser_2.update)
        self.pushButton_2.clicked.connect(self.textBrowser.update)
        self.pushButton_5.clicked.connect(self.textBrowser_2.update)
        self.pushButton_5.clicked.connect(self.textBrowser.update)
        self.lineEdit.returnPressed.connect(MainWindow.get_Delta)
        self.lineEdit_2.returnPressed.connect(MainWindow.get_Delta_Increase)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "模型"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "KNN"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "CART"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "SVM"))
        self.label_3.setText(_translate("MainWindow", "训练集"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "Wine"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Digits"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "From Self.Data"))
        self.label_4.setText(_translate("MainWindow", "选择单个算法"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "GD_S"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "GD_theta"))
        self.comboBox_6.setItemText(2, _translate("MainWindow", "GW_S_zh"))
        self.comboBox_6.setItemText(3, _translate("MainWindow", "GW_S"))
        self.comboBox_6.setItemText(4, _translate("MainWindow", "GW_theta"))
        self.label.setText(_translate("MainWindow", "Delta初始值设置"))
        self.label_7.setText(_translate("MainWindow", "Delta增量设置"))
        self.pushButton_2.setText(_translate("MainWindow", "使用单个算法特征选择"))
        self.pushButton_5.setText(_translate("MainWindow", "使用全部算法进行特征选择"))
        self.pushButton.setText(_translate("MainWindow", "帮助"))
        self.label_5.setText(_translate("MainWindow", "已选择的特征编号"))
        self.label_6.setText(_translate("MainWindow", "用时/s"))
        self.pushButton_3.setText(_translate("MainWindow", "退出程序"))


def dependency_s_gs(data_array, delta, k):
    try:
        s = delta
        m, n = data_array.shape
        D = data_array[:, n - 1]
        r = 0
        for i in range(m):
            label_diff = np.argwhere(data_array[:, n - 1] != data_array[i][n - 1]).flatten()
            array_diff = data_array[label_diff, 0:n - 1]
            p, q = array_diff.shape
            if k == 1:
                for j in range(p):
                    temp = []
                    tempArray = np.abs(array_diff[j, :] - data_array[i, 0:n - 1])
                    for loop in range(q):
                        tempValue = tempArray[loop]
                        temp.append(tempValue if tempValue < 1 else 1)
                    array_diff[j, :] = np.array(temp)
                array_diff = array_diff * array_diff
                value_nearest, label_nearest = np.min(np.sum(array_diff, axis=1)), np.argmin(np.sum(array_diff, axis=1))
                r += (1 - (np.exp(-value_nearest / 2 / s ** 2))) / m
            else:
                temp = []
                for j in range(p):
                    temp.append(min((abs(array_diff[j, :] - data_array[i, 0:n - 1]))[0], 1))
                temp = np.array(temp)
                temp = temp.reshape(len(temp), 1)
                d = temp * temp
                y = np.argsort(np.sum(d, axis=1))
                temp = np.median(array_diff[y[0:k], :])
                value_nearest = np.sum((data_array[i, 0:n - 1] - temp) ** 2)
                r = r + (1 - (np.exp(-value_nearest / 2 / s))) / m
        return r
    except:
        return None


def dependency_theta_gs(data_array, delta, k):
    try:
        s = delta
        m, n = data_array.shape
        D = data_array[:, n - 1]
        r = 0
        for i in range(m):
            label_diff = np.argwhere(data_array[:, n - 1] != data_array[i][n - 1]).flatten()
            array_diff = data_array[label_diff, 0:n - 1]
            p, q = array_diff.shape
            if k == 1:
                for j in range(p):
                    temp = []
                    temparray = np.abs(array_diff[j, :] - data_array[i, 0:n - 1])
                    for loop in range(q):
                        tempvalue = temparray[loop]
                        temp.append(tempvalue if tempvalue < 1 else 1)
                    array_diff[j, :] = np.array(temp)
                array_diff = array_diff * array_diff
                value_nearest, label_nearest = np.min(np.sum(array_diff, axis=1)), np.argmin(np.sum(array_diff, axis=1))
                r = r + np.sqrt(1 - (np.exp(-value_nearest / 2 / s)) ** 2) / m
            else:
                temp = []
                for j in range(p):
                    temp.append(min((abs(array_diff[j, :] - data_array[i, 0:n - 1]))[0], 1))
                temp = np.array(temp)
                temp = temp.reshape(len(temp), 1)
                d = temp * temp
                y = np.argsort(np.sum(d, axis=1))
                temp = np.median(array_diff[y[0:k], :])
                value_nearest = np.sum((data_array[i, 0:n - 1] - temp) ** 2)
                r = r + np.sqrt(1 - (np.exp(-value_nearest / 2 / s)) ** 2) / m
        return r
    except:
        return None


def certainty_s_gs_zh(data_array, delta, k):
    try:
        s = delta
        m, n = data_array.shape
        D = data_array[:, n - 1]
        dv = []
        for i in range(len(D)):
            if dv.count(D[i]) == 0:
                dv.append(D[i])
        D = np.ndarray((0, 0))
        CC = []
        for i in range(m):
            label_diff = np.argwhere(data_array[:, n - 1] != data_array[i][n - 1])
            temp_1 = len(label_diff)
            temp_dist = np.sum(
                (np.tile(data_array[i, 0:(n - 1)], (temp_1, 1)) - data_array[label_diff.flatten(), 0:n - 1]) ** 2,
                axis=1)
            temp = np.sort(temp_dist)
            temp = temp.reshape(len(temp), 1)
            M = temp[0:k]
            LA = np.sum(np.ones(M.shape) - np.exp(-M / delta))
            UA = 0
            D = dv
            lenD = len(D)
            for j in range(lenD):
                UP = 0
                if data_array[i, n - 1] != D[j]:
                    label_diff = np.argwhere(data_array[:, n - 1] == D[j])
                    temp_1 = len(label_diff)
                    temp_dist = np.sum(
                        (np.tile(data_array[i, 0:n - 1], (temp_1, 1)) - data_array[label_diff, 0:n - 1] ** 2, 2))
                    temp = np.sort(temp_dist)
                    M = temp[0:k]
                    UP = np.exp(-M / delta) / (lenD - 1)
                UA += np.sum(UP)
            CC.append((LA - UA) / k)
        return sum(CC) / m
    except:
        return None


def certainty_s_gs(data_array, delta, k):
    try:
        s = delta
        m, n = data_array.shape
        D = data_array[:, n - 1]
        dv = np.unique(D)
        D = np.ndarray((0, 0))
        CC = []
        r = 0
        for i in range(m):
            label_diff = np.argwhere(data_array[:, n - 1] != data_array[i][n - 1])
            temp_1 = len(label_diff)
            temp_dist = np.sum(
                (np.tile(data_array[i, 0:(n - 1)], (temp_1, 1)) - data_array[label_diff.flatten(), 0:n - 1]) ** 2,
                axis=1)
            temp = np.sort(temp_dist)
            temp = temp.reshape(len(temp), 1)
            M = temp[0:k]
            LA = np.sum(np.ones(M.shape) - np.exp(-M / delta))
            UA = 0
            for j in range(len(D)):
                UP = 0
                if data_array[i, n - 1] != D[j]:
                    label_diff = np.argwhere(data_array[:, n - 1] == D[j])
                    temp_1 = len(label_diff)
                    temp_dist = np.sum(
                        (np.tile(data_array[i, 0:n - 1], (temp_1, 1)) - data_array[label_diff, 0:n - 1] ** 2, 2))
                    temp = np.sort(temp_dist)
                    M = temp[0:k]
                    UP = np.exp(-M / delta)
                UA += np.sum(UP)
            CC.append((LA - UA) / k)
        return sum(CC) / m
    except:
        return None


def certainty_theta_gs(data_array, delta, k):
    try:
        s = delta
        m, n = data_array.shape
        D = data_array[:, n - 1]
        dv = np.unique(D)
        D = np.ndarray((0, 0))
        CC = []
        r = 0
        for i in range(m):
            label_diff = np.argwhere(data_array[:, n - 1] != data_array[i][n - 1])
            temp_1 = len(label_diff)
            temp_dist = np.sum(
                (np.tile(data_array[i, 0:(n - 1)], (temp_1, 1)) - data_array[label_diff.flatten(), 0:n - 1]) ** 2,
                axis=1)
            temp = np.sort(temp_dist)
            temp = temp.reshape(len(temp), 1)
            M = temp[0:k]
            LA = np.sum(np.sqrt(np.ones_like(M) - (np.exp(-M / delta)) ** 2))
            UA = 0
            for j in range(len(D)):
                UP = 0
                if data_array[i, n - 1] != D[j]:
                    label_diff = np.argwhere(data_array[:, n - 1] == D[j])
                    temp_1 = len(label_diff)
                    temp_dist = np.sum(
                        (np.tile(data_array[i, 0:n - 1], (temp_1, 1)) - data_array[label_diff, 0:n - 1] ** 2, 2))
                    temp = np.sort(temp_dist)
                    M = temp[0:k]
                    UP = np.sum(np.ones_like(M) - np.sqrt(np.ones_like(M) - (np.exp(-M / delta)) ** 2))
                UA += np.sum(UP)
            CC.append((LA - UA) / k)
        return sum(CC) / m
    except:
        return None


def FS_GKFS(data_array, evaluator, delta, k):
    try:
        global SelectNum
        m, n = data_array.shape
        featureSelect = []
        sig = []
        feature_lft = np.array(range(0, n - 1))
        array_cur = np.zeros((m, n - 1))
        num_cur = -1
        x = 0
        sig_s = 0
        while num_cur < n - 1:
            x = x + 1
            if num_cur == -1:
                array_cur = np.zeros((m, n - 1))
            else:
                array_cur[:, num_cur] = data_array[:, int(featureSelect[num_cur])].flatten()
            efc_tmp = [0 for i in range(len(feature_lft))]
            for i in range(0, len(feature_lft)):
                array_tmp = array_cur
                array_tmp[:, num_cur + 1:num_cur + 3] = data_array.take([feature_lft[i], n - 1], axis=1)
                delLs = []
                for j in range(array_tmp.shape[1]):
                    if all(array_tmp[:, j] == np.zeros_like(array_tmp[:, j])):
                        delLs.append(j)
                array_tmp = np.delete(array_tmp, delLs, axis=1)
                if evaluator == "GD_S":
                    efc_tmp[i] = dependency_s_gs(array_tmp, delta, k)
                elif evaluator == "GD_theta":
                    efc_tmp[i] = dependency_theta_gs(array_tmp, delta, k)
                elif evaluator == "GW_S_zh":
                    efc_tmp[i] = certainty_s_gs_zh(array_tmp, delta, k)
                elif evaluator == "GW_S":
                    efc_tmp[i] = certainty_s_gs(array_tmp, delta, k)
                elif evaluator == "GW_theta":
                    efc_tmp[i] = certainty_theta_gs(array_tmp, delta, k)
            if x == 1:
                sig_s = efc_tmp
            max_efc, max_sequence1 = np.max(efc_tmp), np.argmax(efc_tmp)
            if num_cur > -1 and max_efc - sig[num_cur] < 0.0001:
                num_cur = n - 1
            elif np.all(max_efc > 0) or num_cur > -1:
                sig.append(max_efc)
                featureSelect.append(feature_lft[max_sequence1])
                SelectNum += 1
                feature_lft = np.delete(feature_lft, max_sequence1)
                num_cur += 1
            else:
                num_cur = n - 1
        sig_a = sig
        return featureSelect, sig_s, sig_a
    except:
        return None, None, None


data = []
SelectNum = 0


# 外部数据录入
# # def loadData():
#     os.chdir('D:')
#     f = open('wdbc.txt')
#     i = 0
#     lines = 0
#     for i in f:
#         if lines>2001:
#             break
#         tempData = (i.strip('\n')).split('\t')
#         for j in range(len(tempData)):
#             tempData[j] = eval(tempData[j])
#         data.append(tempData)
#         lines += 1


def main(K=1):
    global data, data_wine_attr_train, data_wine_label_train, data_wine_label_test, data_wine_attr_test, isAll, \
        choiceModel, putAttrSelected, Time, Delta, DeltaIncreae, data_digits_attr_test, data_digits_attr_train, \
        data_digits_label_test, data_digits_label_train, \
        choiceDataSets, choiceAlgorithm
    Time_begin = time.perf_counter()
    # loadData()
    # data = np.array(data)
    # 输入参数
    attrNum = len(data_wine_attr_train[0, :])
    scores = []
    AttrNum = []
    candiAlgo = []
    data_wine_attr_train_new = []
    data_wine_attr_test_new = []
    data_wine_label_train_new = []
    data_wine_label_test_new = []
    data_digits_label_train_new = []
    data_digits_label_test_new = []
    score = 0
    marker = ['*', 'o', '+', '<', '>']
    i = 0
    if isAll:
        candiAlgo = ['GD_S', 'GD_theta', 'GW_S_zh', 'GW_S', 'GW_theta']
    else:
        candiAlgo.append(choiceAlgorithm)
    for Evaluator in candiAlgo:
        AttrNum = []
        scores = []
        Delta = 0.001
        while True:
            if choiceDataSets == "Wine":
                data_wine_label_train_new = data_wine_label_train.reshape(len(data_wine_label_train), 1)
                data_wine_label_test_new = data_wine_label_test.reshape(len(data_wine_label_test), 1)
                data = np.hstack([data_wine_attr_train, data_wine_label_train_new])
            elif choiceDataSets == "Digits":
                data_digits_label_train_new = data_digits_label_train.reshape(len(data_digits_label_train), 1)
                data_digits_label_test_new = data_digits_label_test.reshape(len(data_digits_label_test), 1)
                data = np.hstack([data_digits_attr_train, data_digits_label_train_new])
            data_Array = data
            try:
                featureSelect, sig_S, sig_A = FS_GKFS(data_Array, Evaluator, Delta, K)
            except ValueError:
                break
            if featureSelect is None or len(featureSelect) >= attrNum - 2:
                break
            if choiceDataSets == "Wine":
                data_wine_attr_train_new = data_wine_attr_train[:, featureSelect]
                data_wine_attr_test_new = data_wine_attr_test[:, featureSelect]
                if choiceModel == "SVM":
                    svcNew = SVC()
                    svcNew.fit(data_wine_attr_train_new, np.ravel(data_wine_label_train_new))
                    score = svcNew.score(data_wine_attr_test_new, np.ravel(data_wine_label_test_new))
                elif choiceModel == "KNN":
                    Knn = KNeighborsClassifier()
                    Knn.fit(data_wine_attr_train_new, np.ravel(data_wine_label_train_new))
                    score = Knn.score(data_wine_attr_test_new, np.ravel(data_wine_label_test_new))
                elif choiceModel == "CART":
                    cart = tree.DecisionTreeClassifier()
                    cart.fit(data_wine_attr_train_new, np.ravel(data_wine_label_train_new))
                    score = cart.score(data_wine_attr_test_new, np.ravel(data_wine_label_test_new))
            elif choiceDataSets == "Digits":
                data_digits_attr_train_new = data_digits_attr_train[:, featureSelect]
                data_digits_attr_test_new = data_digits_attr_test[:, featureSelect]
                if choiceModel == "SVM":
                    svcNew = SVC()
                    svcNew.fit(data_digits_attr_train_new, np.ravel(data_digits_label_train_new))
                    score = svcNew.score(data_digits_attr_test_new, np.ravel(data_digits_label_test_new))
                elif choiceModel == "KNN":
                    Knn = KNeighborsClassifier()
                    Knn.fit(data_digits_attr_train_new, np.ravel(data_digits_label_train_new))
                    score = Knn.score(data_digits_attr_test_new, np.ravel(data_digits_label_test_new))
                elif choiceModel == "CART":
                    cart = tree.DecisionTreeClassifier()
                    cart.fit(data_digits_attr_train_new, np.ravel(data_digits_label_train_new))
                    score = cart.score(data_digits_attr_test_new, np.ravel(data_digits_label_test_new))
            scores.append(score)
            AttrNum.append(len(featureSelect))
            print(featureSelect)
            putAttrSelected = featureSelect
            Delta += DeltaIncreae
        if isAll:
            choiceAlgorithm = Evaluator
            endTime = time.perf_counter()
            Time = endTime - Time_begin
            w.updata()
        plt.plot(AttrNum, scores, label=Evaluator, marker=marker[i])
        i += 1
    Time_end = time.perf_counter()
    Time = Time_end - Time_begin
    plt.legend()
    plt.show()


class SecondUI(QtWidgets.QMainWindow, Ui_MainWindow):

    def __init__(self):
        super(SecondUI, self).__init__()
        self.resize(500, 80)
        self.setWindowTitle("Help")
        self.label = QtWidgets.QLabel(self)
        self.label.resize(500, 50)
        self.label.setText("    For More Help please visit \n\n    https://github.com/XingJinming-real")


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent=parent)
        self.second_ui = SecondUI()
        self.setupUi(self)

    def open_second_UI(self):
        self.second_ui.show()

    def get_algorithmChoice(self):
        global choiceAlgorithm
        choiceAlgorithm = self.comboBox_6.currentText()

    def get_dataSetsChoice(self):
        global choiceDataSets
        choiceDataSets = self.comboBox_5.currentText()

    def get_modelChoice(self):
        global choiceModel
        choiceModel = self.comboBox_4.currentText()

    def get_Delta(self):
        global Delta
        Delta = self.lineEdit.text()

    def get_Delta_Increase(self):
        global DeltaIncreae
        DeltaIncreae = self.lineEdit_2.text()

    def Train(self):
        main()
        self.updata()

    def isAll(self):
        global isAll
        isAll = True
        self.Train()

    def updata(self):
        global putAttrSelected, choiceAlgorithm, choiceModel, choiceDataSets, Time
        self.textBrowser_2.append(
            "模型为" + choiceModel + '\n' + "算法为" + choiceAlgorithm + '\n' + "数据集为" + choiceDataSets + '\n' + (
                str(putAttrSelected)))
        self.textBrowser.append(
            "模型为" + choiceModel + '\n' + "算法为" + choiceAlgorithm + '\n' + "数据集为" + choiceDataSets + '\n' + "用时" + (
                str(Time)))
        self.cursor = self.textBrowser_2.textCursor()
        self.textBrowser_2.moveCursor(self.cursor.End)
        self.cursor = self.textBrowser.textCursor()
        self.textBrowser.moveCursor(self.cursor.End)
        QtWidgets.QApplication.processEvents()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())
